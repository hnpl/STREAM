===============================================

STREAM is the de facto industry standard benchmark
for measuring sustained memory bandwidth.

Documentation for STREAM is on the web at:
   http://www.cs.virginia.edu/stream/ref.html

===============================================
INSTRUCTIONS
===============================================
1) STREAM requires different amounts of memory to run on different
systems, depending on both the system cache size(s) and the
granularity of the system timer.
You should adjust the value of 'STREAM_ARRAY_SIZE' (below)
to meet *both* of the following criteria:
(a) Each array must be at least 4 times the size of the
available cache memory. I don't worry about the difference
between 10^6 and 2^20, so in practice the minimum array size
is about 3.8 times the cache size.
Example 1: One Xeon E3 with 8 MB L3 cache
STREAM_ARRAY_SIZE should be >= 4 million, giving
an array size of 30.5 MB and a total memory requirement
of 91.5 MB.  
Example 2: Two Xeon E5's with 20 MB L3 cache each (using OpenMP)
STREAM_ARRAY_SIZE should be >= 20 million, giving
an array size of 153 MB and a total memory requirement
of 458 MB.  
(b) The size should be large enough so that the 'timing calibration'
output by the program is at least 20 clock-ticks.  
Example: most versions of Windows have a 10 millisecond timer
granularity.  20 "ticks" at 10 ms/tic is 200 milliseconds.
If the chip is capable of 10 GB/s, it moves 2 GB in 200 msec.
This means the each array must be at least 1 GB, or 128M elements.

Version 5.10 increases the default array size from 2 million
elements to 10 million elements in response to the increasing
size of L3 caches.  The new default size is large enough for caches
up to 20 MB. 
Version 5.10 changes the loop index variables from "register int"
to "ssize_t", which allows array indices >2^32 (4 billion)
on properly configured 64-bit systems.  Additional compiler options
(such as "-mcmodel=medium") may be required for large memory runs.

Array size can be set at compile time without modifying the source
code for the (many) compilers that support preprocessor definitions
on the compile line.  E.g.,
      gcc -O -DSTREAM_ARRAY_SIZE=100000000 stream.c -o stream.100M
will override the default size of 10M with a new size of 100M elements
per array.

2) STREAM runs each kernel "NTIMES" times and reports the *best* result
for any iteration after the first, therefore the minimum value
for NTIMES is 2.

There are no rules on maximum allowable values for NTIMES, but
values larger than the default are unlikely to noticeably
increase the reported performance.

NTIMES can also be set on the compile line without changing the source
code using, for example, "-DNTIMES=7".

Users are allowed to modify the "OFFSET" variable, which *may* change the
relative alignment of the arrays (though compilers may change the 
effective offset by making the arrays non-contiguous on some systems). 
Use of non-zero values for OFFSET can be especially helpful if the
STREAM_ARRAY_SIZE is set to a value close to a large power of 2.
OFFSET can also be set on the compile line without changing the source
code using, for example, "-DOFFSET=56".

3) Compile the code with optimization.  Many compilers generate
unreasonably bad code before the optimizer tightens things up.  
If the results are unreasonably good, on the other hand, the
optimizer might be too smart for me!

For a simple single-core version, try compiling with:
cc -O stream.c -o stream
This is known to work on many, many systems....

To use multiple cores, you need to tell the compiler to obey the OpenMP
directives in the code.  This varies by compiler, but a common example is
gcc -O -fopenmp stream.c -o stream_omp
The environment variable OMP_NUM_THREADS allows runtime control of the 
number of threads/cores used when the resulting "stream_omp" program
is executed.

To run with single-precision variables and arithmetic, simply add
-DSTREAM_TYPE=float
to the compile line.
Note that this changes the minimum array sizes required --- see (1) above.

The preprocessor directive "TUNED" does not do much -- it simply causes the 
code to call separate functions to execute each kernel.  Trivial versions
of these functions are provided, but they are *not* tuned -- they just 
provide predefined interfaces to be replaced with tuned code.


4) Optional: Mail the results to mccalpin@cs.virginia.edu
Be sure to include info that will help me understand:
a) the computer hardware configuration (e.g., processor model, memory type)
b) the compiler name/version and compilation flags
c) any run-time information (such as OMP_NUM_THREADS)
d) all of the output from the test case.

Thanks!


===============================================
NEWS
===============================================
UPDATE: October 28 2014:

"stream_mpi.c" released in the Versions directory.

Based on Version 5.10 of stream.c, stream_mpi.c
brings the following new features:
* MPI implementation that *distributes* the arrays
  across all MPI ranks. (The older Fortran version
  of STREAM in MPI *replicates* the arrays across
  all MPI ranks.)
* Data is allocated using "posix_memalign" 
  rather than using static arrays.  Different
  compiler flags may be needed for both portability
  and optimization.
  See the READ.ME file in the Versions directory
  for more details.
* Error checking and timing done by all ranks and
  gathered by rank 0 for processing and output.
* Timing code uses barriers to ensure correct
  operation even when multiple MPI ranks run on
  shared memory systems.

NOTE: MPI is not a preferred implementation for
  STREAM, which is intended to measure memory
  bandwidth in shared-memory systems.  In stream_mpi,
  the MPI calls are only used to properly synchronize
  the timers (using MPI_Barrier) and to gather
  timing and error data, so the performance should 
  scale linearly with the size of the cluster.
  But it may be useful, and was an interesting 
  exercise to develop and debug.

===============================================
UPDATE: January 17 2013:

Version 5.10 of stream.c is finally available!

There are no changes to what is being measured, but
a number of long-awaited improvements have been made:

* Updated validation code does not suffer from 
  accumulated roundoff error for large arrays.
* Defining the preprocessor variable "VERBOSE"
  when compiling will (1) cause the code to print the
  measured average relative absolute error (rather than
  simply printing "Solution Validates", and (2) print
  the first 10 array entries with relative error exceeding
  the error tolerance.
* Array index variables have been upgraded from
  "int" to "ssize_t" to allow arrays with more
  than 2 billion elements on 64-bit systems.
* Substantial improvements to the comments in 
  the source on how to configure/compile/run the
  benchmark.
* The proprocessor variable controlling the array
  size has been changed from "N" to "STREAM_ARRAY_SIZE".
* A new preprocessor variable "STREAM_TYPE" can be
  used to override the data type from the default
  "double" to "float".
  This mechanism could also be used to change to 
  non-floating-point types, but several "printf"
  statements would need to have their formats changed
  to accomodate the modified data type.
* Some small changes in output, including printing
  array sizes is GiB as well as MiB.
* Change to the default output format to print fewer
  decimals for the bandwidth and more decimals for
  the min/max/avg execution times.


===============================================
UPDATE: February 19 2009:

The most recent "official" versions have been renamed
"stream.f" and "stream.c" -- all other versions have
been moved to the "Versions" subdirectory and should be
considered obsolete.

The "official" timer (was "second_wall.c") has been
renamed "mysecond.c".   This is embedded in the C version
("stream.c"), but still needs to be externally linked to
the FORTRAN version ("stream.f").  The new version defines
entry points both with and without trailing underscores,
so it *should* link automagically with any Fortran compiler.

===============================================

STREAM is a project of "Dr. Bandwidth":
	John D. McCalpin, Ph.D.
	john@mccalpin.com

===============================================

The STREAM web and ftp sites are currently hosted at
the Department of Computer Science at the University of
Virginia under the generous sponsorship of Professor Bill
Wulf and Professor Alan Batson.

===============================================
